"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const backfill_player_csv_1 = require("./backfill-player-csv");
const fs = require('fs');
const originalBatchStreamTransform = require('./batching-stream-transform');
const originalSequentialStreamHandler = require('./sequential-stream-handler');
const originalDynamoDBManager = require('./ddb-manager');
describe('BackfillPlayerCsvS3ToDDB', () => {
    let pauseResumeStream;
    let destinationTableName;
    const mockBatchStreamTransform = jest.fn().mockImplementation(() => {
        const mockInstance = {
            on: jest.fn(),
            once: jest.fn(),
            emit: jest.fn(),
            _transform: jest.fn()
        };
        return mockInstance;
    });
    jest.mock('./batching-stream-transform', () => ({
        ...originalBatchStreamTransform,
        BatchStreamTransform: mockBatchStreamTransform,
    }));
    const mockSequentialStreamHandler = jest.fn().mockImplementation(() => {
        return {
            async asyncIterateSequentially(items, pauseResume) {
                return Promise.resolve();
            },
        };
    });
    jest.mock('./sequential-stream-handler', () => ({
        ...originalSequentialStreamHandler,
        SequentialStreamHandler: mockSequentialStreamHandler,
    }));
    const mockDynamoDBManager = jest.fn().mockImplementation(() => {
        return {};
    });
    jest.mock('./ddb-manager', () => ({
        ...originalDynamoDBManager,
        DynamoDBManager: mockDynamoDBManager,
    }));
    beforeEach(() => {
        process.env.BATCH_SIZE = '25';
        pauseResumeStream = false;
        destinationTableName = 'mockTableName';
        mockBatchStreamTransform.mockClear();
        mockDynamoDBManager.mockClear();
        mockSequentialStreamHandler.mockClear();
    });
    afterEach(() => {
        jest.clearAllMocks();
        delete process.env.BATCH_SIZE;
    });
    it('should process CSV records and upsert them to DynamoDB', async () => {
        expect(mockBatchStreamTransform).not.toHaveBeenCalled();
        expect(mockSequentialStreamHandler).not.toHaveBeenCalled();
        expect(mockDynamoDBManager).not.toHaveBeenCalled();
        const readableStream = fs.createReadStream('./test.csv');
        const backfillPlayerCsvS3ToDDB = new backfill_player_csv_1.BackfillPlayerCsvStreamToDDB(readableStream, pauseResumeStream, destinationTableName);
        // todo - expand with e2e unit tests that verify backfillPlayerCsvS3ToDDB process expects ddb
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2ZpbGwtcGxheWVycy1sYW1iZGEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhY2tmaWxsLXBsYXllcnMtbGFtYmRhLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBbUU7QUFHbkUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXpCLE1BQU0sNEJBQTRCLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFDNUUsTUFBTSwrQkFBK0IsR0FBRyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUMvRSxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUV6RCxRQUFRLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksaUJBQTBCLENBQUM7SUFDL0IsSUFBSSxvQkFBNEIsQ0FBQztJQUVqQyxNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7UUFDL0QsTUFBTSxZQUFZLEdBQUc7WUFDakIsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ2YsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7U0FDeEIsQ0FBQztRQUNGLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLEdBQUcsNEJBQTRCO1FBQy9CLG9CQUFvQixFQUFFLHdCQUF3QjtLQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVKLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtRQUNsRSxPQUFPO1lBQ0gsS0FBSyxDQUFDLHdCQUF3QixDQUFDLEtBQVUsRUFBRSxXQUFvQjtnQkFDM0QsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QyxHQUFHLCtCQUErQjtRQUNsQyx1QkFBdUIsRUFBRSwyQkFBMkI7S0FDdkQsQ0FBQyxDQUFDLENBQUM7SUFFSixNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7UUFDMUQsT0FBTyxFQUNOLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDOUIsR0FBRyx1QkFBdUI7UUFDMUIsZUFBZSxFQUFFLG1CQUFtQjtLQUN2QyxDQUFDLENBQUMsQ0FBQztJQUVKLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFFOUIsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQzFCLG9CQUFvQixHQUFHLGVBQWUsQ0FBQztRQUN2Qyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNoQywyQkFBMkIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3REFBd0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwRSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4RCxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMzRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUVuRCxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDeEQsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLGtEQUE0QixDQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBRTNILDZGQUE2RjtJQUNqRyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCYWNrZmlsbFBsYXllckNzdlN0cmVhbVRvRERCfSBmcm9tICcuL2JhY2tmaWxsLXBsYXllci1jc3YnO1xyXG5pbXBvcnQge0R5bmFtb0RCTWFuYWdlcn0gZnJvbSBcIi4vZGRiLW1hbmFnZXJcIjtcclxuXHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuXHJcbmNvbnN0IG9yaWdpbmFsQmF0Y2hTdHJlYW1UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2JhdGNoaW5nLXN0cmVhbS10cmFuc2Zvcm0nKTtcclxuY29uc3Qgb3JpZ2luYWxTZXF1ZW50aWFsU3RyZWFtSGFuZGxlciA9IHJlcXVpcmUoJy4vc2VxdWVudGlhbC1zdHJlYW0taGFuZGxlcicpO1xyXG5jb25zdCBvcmlnaW5hbER5bmFtb0RCTWFuYWdlciA9IHJlcXVpcmUoJy4vZGRiLW1hbmFnZXInKTtcclxuXHJcbmRlc2NyaWJlKCdCYWNrZmlsbFBsYXllckNzdlMzVG9EREInLCAoKSA9PiB7XHJcbiAgICBsZXQgcGF1c2VSZXN1bWVTdHJlYW06IGJvb2xlYW47XHJcbiAgICBsZXQgZGVzdGluYXRpb25UYWJsZU5hbWU6IHN0cmluZztcclxuXHJcbiAgICBjb25zdCBtb2NrQmF0Y2hTdHJlYW1UcmFuc2Zvcm0gPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICBjb25zdCBtb2NrSW5zdGFuY2UgPSB7XHJcbiAgICAgICAgICAgIG9uOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICAgIG9uY2U6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgZW1pdDogamVzdC5mbigpLFxyXG4gICAgICAgICAgICBfdHJhbnNmb3JtOiBqZXN0LmZuKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBtb2NrSW5zdGFuY2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICBqZXN0Lm1vY2soJy4vYmF0Y2hpbmctc3RyZWFtLXRyYW5zZm9ybScsICgpID0+ICh7XHJcbiAgICAgICAgLi4ub3JpZ2luYWxCYXRjaFN0cmVhbVRyYW5zZm9ybSxcclxuICAgICAgICBCYXRjaFN0cmVhbVRyYW5zZm9ybTogbW9ja0JhdGNoU3RyZWFtVHJhbnNmb3JtLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIGNvbnN0IG1vY2tTZXF1ZW50aWFsU3RyZWFtSGFuZGxlciA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFzeW5jIGFzeW5jSXRlcmF0ZVNlcXVlbnRpYWxseShpdGVtczogYW55LCBwYXVzZVJlc3VtZTogYm9vbGVhbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICBqZXN0Lm1vY2soJy4vc2VxdWVudGlhbC1zdHJlYW0taGFuZGxlcicsICgpID0+ICh7XHJcbiAgICAgICAgLi4ub3JpZ2luYWxTZXF1ZW50aWFsU3RyZWFtSGFuZGxlcixcclxuICAgICAgICBTZXF1ZW50aWFsU3RyZWFtSGFuZGxlcjogbW9ja1NlcXVlbnRpYWxTdHJlYW1IYW5kbGVyLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIGNvbnN0IG1vY2tEeW5hbW9EQk1hbmFnZXIgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICBqZXN0Lm1vY2soJy4vZGRiLW1hbmFnZXInLCAoKSA9PiAoe1xyXG4gICAgICAgIC4uLm9yaWdpbmFsRHluYW1vREJNYW5hZ2VyLFxyXG4gICAgICAgIER5bmFtb0RCTWFuYWdlcjogbW9ja0R5bmFtb0RCTWFuYWdlcixcclxuICAgIH0pKTtcclxuXHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBwcm9jZXNzLmVudi5CQVRDSF9TSVpFID0gJzI1JztcclxuXHJcbiAgICAgICAgcGF1c2VSZXN1bWVTdHJlYW0gPSBmYWxzZTtcclxuICAgICAgICBkZXN0aW5hdGlvblRhYmxlTmFtZSA9ICdtb2NrVGFibGVOYW1lJztcclxuICAgICAgICBtb2NrQmF0Y2hTdHJlYW1UcmFuc2Zvcm0ubW9ja0NsZWFyKCk7XHJcbiAgICAgICAgbW9ja0R5bmFtb0RCTWFuYWdlci5tb2NrQ2xlYXIoKTtcclxuICAgICAgICBtb2NrU2VxdWVudGlhbFN0cmVhbUhhbmRsZXIubW9ja0NsZWFyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5CQVRDSF9TSVpFO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBwcm9jZXNzIENTViByZWNvcmRzIGFuZCB1cHNlcnQgdGhlbSB0byBEeW5hbW9EQicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBleHBlY3QobW9ja0JhdGNoU3RyZWFtVHJhbnNmb3JtKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICAgIGV4cGVjdChtb2NrU2VxdWVudGlhbFN0cmVhbUhhbmRsZXIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICAgICAgZXhwZWN0KG1vY2tEeW5hbW9EQk1hbmFnZXIpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbSgnLi90ZXN0LmNzdicpXHJcbiAgICAgICAgY29uc3QgYmFja2ZpbGxQbGF5ZXJDc3ZTM1RvRERCID0gbmV3IEJhY2tmaWxsUGxheWVyQ3N2U3RyZWFtVG9EREIocmVhZGFibGVTdHJlYW0sIHBhdXNlUmVzdW1lU3RyZWFtLCBkZXN0aW5hdGlvblRhYmxlTmFtZSk7XHJcblxyXG4gICAgICAgIC8vIHRvZG8gLSBleHBhbmQgd2l0aCBlMmUgdW5pdCB0ZXN0cyB0aGF0IHZlcmlmeSBiYWNrZmlsbFBsYXllckNzdlMzVG9EREIgcHJvY2VzcyBleHBlY3RzIGRkYlxyXG4gICAgfSk7XHJcbn0pOyJdfQ==