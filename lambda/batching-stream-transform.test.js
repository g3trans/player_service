"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const batching_stream_transform_1 = require("./batching-stream-transform");
const stream_1 = require("stream");
describe('BatchStreamTransform', () => {
    it('transforms items into batches with specified size', (done) => {
        const maxItems = 3;
        const streamTransformer = (item) => item.toUpperCase();
        const ignoreFirstLine = false;
        const inputItems = ['item1', 'item2', 'item3', 'item4', 'item5'];
        const expectedOutput = [['ITEM1', 'ITEM2', 'ITEM3'], ['ITEM4', 'ITEM5']];
        const inputStream = new stream_1.Readable({ objectMode: true });
        inputItems.forEach((item) => inputStream.push(item));
        inputStream.push(null);
        const outputData = [];
        const outputStream = new stream_1.Writable({
            objectMode: true,
            write(chunk, encoding, callback) {
                outputData.push(chunk);
                callback();
            },
        });
        const batchStreamTransform = new batching_stream_transform_1.BatchStreamTransform(maxItems, streamTransformer, ignoreFirstLine);
        inputStream.pipe(batchStreamTransform).pipe(outputStream);
        outputStream.on('finish', () => {
            expect(outputData).toEqual(expectedOutput);
            done();
        });
    });
    it('ignores the first line if ignoreFirstLine is true', (done) => {
        const maxItems = 3;
        const streamTransformer = (item) => item.toUpperCase();
        const ignoreFirstLine = true;
        const inputItems = ['ignored', 'item1', 'item2', 'item3', 'item4', 'item5'];
        const expectedOutput = [['ITEM1', 'ITEM2', 'ITEM3'], ['ITEM4', 'ITEM5']];
        const inputStream = new stream_1.Readable({ objectMode: true });
        inputItems.forEach((item) => inputStream.push(item));
        inputStream.push(null);
        const outputData = [];
        const outputStream = new stream_1.Writable({
            objectMode: true,
            write(chunk, encoding, callback) {
                outputData.push(chunk);
                callback();
            },
        });
        const batchStreamTransform = new batching_stream_transform_1.BatchStreamTransform(maxItems, streamTransformer, ignoreFirstLine);
        inputStream.pipe(batchStreamTransform).pipe(outputStream);
        outputStream.on('finish', () => {
            expect(outputData).toEqual(expectedOutput);
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2hpbmctc3RyZWFtLXRyYW5zZm9ybS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmF0Y2hpbmctc3RyZWFtLXRyYW5zZm9ybS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkVBQW1FO0FBQ25FLG1DQUE0QztBQUU1QyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzdELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNuQixNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUQsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBRTlCLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRWpFLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFekUsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkIsTUFBTSxVQUFVLEdBQVUsRUFBRSxDQUFDO1FBQzdCLE1BQU0sWUFBWSxHQUFHLElBQUksaUJBQVEsQ0FBQztZQUM5QixVQUFVLEVBQUUsSUFBSTtZQUNoQixLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRO2dCQUMzQixVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixRQUFRLEVBQUUsQ0FBQztZQUNmLENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxNQUFNLG9CQUFvQixHQUFHLElBQUksZ0RBQW9CLENBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRXBHLFdBQVcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFMUQsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDM0MsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDN0QsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1RCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFFN0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTVFLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFekUsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkIsTUFBTSxVQUFVLEdBQVUsRUFBRSxDQUFDO1FBQzdCLE1BQU0sWUFBWSxHQUFHLElBQUksaUJBQVEsQ0FBQztZQUM5QixVQUFVLEVBQUUsSUFBSTtZQUNoQixLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRO2dCQUMzQixVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixRQUFRLEVBQUUsQ0FBQztZQUNmLENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxNQUFNLG9CQUFvQixHQUFHLElBQUksZ0RBQW9CLENBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBRXBHLFdBQVcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFMUQsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDM0MsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXRjaFN0cmVhbVRyYW5zZm9ybSB9IGZyb20gJy4vYmF0Y2hpbmctc3RyZWFtLXRyYW5zZm9ybSc7XHJcbmltcG9ydCB7IFdyaXRhYmxlLCBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XHJcblxyXG5kZXNjcmliZSgnQmF0Y2hTdHJlYW1UcmFuc2Zvcm0nLCAoKSA9PiB7XHJcbiAgICBpdCgndHJhbnNmb3JtcyBpdGVtcyBpbnRvIGJhdGNoZXMgd2l0aCBzcGVjaWZpZWQgc2l6ZScsIChkb25lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWF4SXRlbXMgPSAzO1xyXG4gICAgICAgIGNvbnN0IHN0cmVhbVRyYW5zZm9ybWVyID0gKGl0ZW06IGFueSkgPT4gaXRlbS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IGlnbm9yZUZpcnN0TGluZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBpbnB1dEl0ZW1zID0gWydpdGVtMScsICdpdGVtMicsICdpdGVtMycsICdpdGVtNCcsICdpdGVtNSddO1xyXG5cclxuICAgICAgICBjb25zdCBleHBlY3RlZE91dHB1dCA9IFtbJ0lURU0xJywgJ0lURU0yJywgJ0lURU0zJ10sIFsnSVRFTTQnLCAnSVRFTTUnXV07XHJcblxyXG4gICAgICAgIGNvbnN0IGlucHV0U3RyZWFtID0gbmV3IFJlYWRhYmxlKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcclxuICAgICAgICBpbnB1dEl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IGlucHV0U3RyZWFtLnB1c2goaXRlbSkpO1xyXG4gICAgICAgIGlucHV0U3RyZWFtLnB1c2gobnVsbCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG91dHB1dERhdGE6IGFueVtdID0gW107XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0U3RyZWFtID0gbmV3IFdyaXRhYmxlKHtcclxuICAgICAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0RGF0YS5wdXNoKGNodW5rKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhdGNoU3RyZWFtVHJhbnNmb3JtID0gbmV3IEJhdGNoU3RyZWFtVHJhbnNmb3JtKG1heEl0ZW1zLCBzdHJlYW1UcmFuc2Zvcm1lciwgaWdub3JlRmlyc3RMaW5lKTtcclxuXHJcbiAgICAgICAgaW5wdXRTdHJlYW0ucGlwZShiYXRjaFN0cmVhbVRyYW5zZm9ybSkucGlwZShvdXRwdXRTdHJlYW0pO1xyXG5cclxuICAgICAgICBvdXRwdXRTdHJlYW0ub24oJ2ZpbmlzaCcsICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KG91dHB1dERhdGEpLnRvRXF1YWwoZXhwZWN0ZWRPdXRwdXQpO1xyXG4gICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnaWdub3JlcyB0aGUgZmlyc3QgbGluZSBpZiBpZ25vcmVGaXJzdExpbmUgaXMgdHJ1ZScsIChkb25lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWF4SXRlbXMgPSAzO1xyXG4gICAgICAgIGNvbnN0IHN0cmVhbVRyYW5zZm9ybWVyID0gKGl0ZW06IGFueSkgPT4gaXRlbS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IGlnbm9yZUZpcnN0TGluZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGNvbnN0IGlucHV0SXRlbXMgPSBbJ2lnbm9yZWQnLCAnaXRlbTEnLCAnaXRlbTInLCAnaXRlbTMnLCAnaXRlbTQnLCAnaXRlbTUnXTtcclxuXHJcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRPdXRwdXQgPSBbWydJVEVNMScsICdJVEVNMicsICdJVEVNMyddLCBbJ0lURU00JywgJ0lURU01J11dO1xyXG5cclxuICAgICAgICBjb25zdCBpbnB1dFN0cmVhbSA9IG5ldyBSZWFkYWJsZSh7IG9iamVjdE1vZGU6IHRydWUgfSk7XHJcbiAgICAgICAgaW5wdXRJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiBpbnB1dFN0cmVhbS5wdXNoKGl0ZW0pKTtcclxuICAgICAgICBpbnB1dFN0cmVhbS5wdXNoKG51bGwpO1xyXG5cclxuICAgICAgICBjb25zdCBvdXRwdXREYXRhOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IG91dHB1dFN0cmVhbSA9IG5ldyBXcml0YWJsZSh7XHJcbiAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgIHdyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dERhdGEucHVzaChjaHVuayk7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBiYXRjaFN0cmVhbVRyYW5zZm9ybSA9IG5ldyBCYXRjaFN0cmVhbVRyYW5zZm9ybShtYXhJdGVtcywgc3RyZWFtVHJhbnNmb3JtZXIsIGlnbm9yZUZpcnN0TGluZSk7XHJcblxyXG4gICAgICAgIGlucHV0U3RyZWFtLnBpcGUoYmF0Y2hTdHJlYW1UcmFuc2Zvcm0pLnBpcGUob3V0cHV0U3RyZWFtKTtcclxuXHJcbiAgICAgICAgb3V0cHV0U3RyZWFtLm9uKCdmaW5pc2gnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChvdXRwdXREYXRhKS50b0VxdWFsKGV4cGVjdGVkT3V0cHV0KTtcclxuICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXX0=