"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequential_stream_handler_1 = require("./sequential-stream-handler");
describe('SequentialStreamHandler', () => {
    let sequentialStreamHandler;
    const mockStreamReader = {
        _read() { },
        [Symbol.asyncIterator]: async function* () {
            yield 1;
            yield 2;
            yield 3;
        },
        readable: true,
        read(size) {
            return this[Symbol.asyncIterator]().toString();
        },
        setEncoding(encoding) {
            return this;
        },
        isPaused: jest.fn(),
        pause: jest.fn(),
        resume: jest.fn(),
        // add all other 19 required ReadableStream methods
    };
    const mockAsyncStreamHandler = jest.fn();
    beforeEach(() => {
        sequentialStreamHandler = new sequential_stream_handler_1.SequentialStreamHandler(mockAsyncStreamHandler);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should iterate sequentially without pausing/resuming the stream', async () => {
        await sequentialStreamHandler.asyncIterateSequentially(mockStreamReader, false);
        expect(mockAsyncStreamHandler).toHaveBeenCalledWith(1);
        expect(mockAsyncStreamHandler).toHaveBeenCalledWith(2);
        expect(mockAsyncStreamHandler).toHaveBeenCalledWith(3);
        expect(mockStreamReader.pause).not.toHaveBeenCalled();
        expect(mockStreamReader.resume).not.toHaveBeenCalled();
    });
    it('should iterate sequentially with pausing/resuming the stream', async () => {
        await sequentialStreamHandler.asyncIterateSequentially(mockStreamReader, true);
        expect(mockAsyncStreamHandler).toHaveBeenCalledWith(1);
        expect(mockStreamReader.pause).toHaveBeenCalledTimes(3);
        expect(mockStreamReader.resume).toHaveBeenCalledTimes(3);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VxdWVudGlhbC1zdHJlYW0taGFuZGxlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VxdWVudGlhbC1zdHJlYW0taGFuZGxlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkVBQTBGO0FBRzFGLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsSUFBSSx1QkFBZ0QsQ0FBQztJQUVyRCxNQUFNLGdCQUFnQixHQUFhO1FBQy9CLEtBQUssS0FBSSxDQUFDO1FBQ1YsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxTQUFTLENBQUM7WUFDbkMsTUFBTSxDQUFDLENBQUM7WUFDUixNQUFNLENBQUMsQ0FBQztZQUNSLE1BQU0sQ0FBQyxDQUFDO1FBQ1osQ0FBQztRQUNELFFBQVEsRUFBRSxJQUFJO1FBQ2QsSUFBSSxDQUFDLElBQWE7WUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxDQUFDO1FBQ0QsV0FBVyxDQUFDLFFBQXdCO1lBQ2hDLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixtREFBbUQ7S0FDL0MsQ0FBQztJQUVULE1BQU0sc0JBQXNCLEdBQXVCLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUU3RCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osdUJBQXVCLEdBQUcsSUFBSSxtREFBdUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2xGLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNYLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3RSxNQUFNLHVCQUF1QixDQUFDLHdCQUF3QixDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWhGLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOERBQThELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUUsTUFBTSx1QkFBdUIsQ0FBQyx3QkFBd0IsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUvRSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXF1ZW50aWFsU3RyZWFtSGFuZGxlciwgQXN5bmNTdHJlYW1IYW5kbGVyIH0gZnJvbSAnLi9zZXF1ZW50aWFsLXN0cmVhbS1oYW5kbGVyJztcclxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xyXG5cclxuZGVzY3JpYmUoJ1NlcXVlbnRpYWxTdHJlYW1IYW5kbGVyJywgKCkgPT4ge1xyXG4gICAgbGV0IHNlcXVlbnRpYWxTdHJlYW1IYW5kbGVyOiBTZXF1ZW50aWFsU3RyZWFtSGFuZGxlcjtcclxuXHJcbiAgICBjb25zdCBtb2NrU3RyZWFtUmVhZGVyOiBSZWFkYWJsZSA9IHtcclxuICAgICAgICBfcmVhZCgpIHt9LFxyXG4gICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IGFzeW5jIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIDE7XHJcbiAgICAgICAgICAgIHlpZWxkIDI7XHJcbiAgICAgICAgICAgIHlpZWxkIDM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWFkYWJsZTogdHJ1ZSxcclxuICAgICAgICByZWFkKHNpemU/OiBudW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkudG9TdHJpbmcoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEVuY29kaW5nKGVuY29kaW5nOiBCdWZmZXJFbmNvZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzUGF1c2VkOiBqZXN0LmZuKCksXHJcbiAgICAgICAgcGF1c2U6IGplc3QuZm4oKSxcclxuICAgICAgICByZXN1bWU6IGplc3QuZm4oKSxcclxuICAgICAgICAvLyBhZGQgYWxsIG90aGVyIDE5IHJlcXVpcmVkIFJlYWRhYmxlU3RyZWFtIG1ldGhvZHNcclxuICAgIH0gYXMgYW55O1xyXG5cclxuICAgIGNvbnN0IG1vY2tBc3luY1N0cmVhbUhhbmRsZXI6IEFzeW5jU3RyZWFtSGFuZGxlciA9IGplc3QuZm4oKTtcclxuXHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBzZXF1ZW50aWFsU3RyZWFtSGFuZGxlciA9IG5ldyBTZXF1ZW50aWFsU3RyZWFtSGFuZGxlcihtb2NrQXN5bmNTdHJlYW1IYW5kbGVyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGl0ZXJhdGUgc2VxdWVudGlhbGx5IHdpdGhvdXQgcGF1c2luZy9yZXN1bWluZyB0aGUgc3RyZWFtJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHNlcXVlbnRpYWxTdHJlYW1IYW5kbGVyLmFzeW5jSXRlcmF0ZVNlcXVlbnRpYWxseShtb2NrU3RyZWFtUmVhZGVyLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIGV4cGVjdChtb2NrQXN5bmNTdHJlYW1IYW5kbGVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICAgICAgICBleHBlY3QobW9ja0FzeW5jU3RyZWFtSGFuZGxlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoMik7XHJcbiAgICAgICAgZXhwZWN0KG1vY2tBc3luY1N0cmVhbUhhbmRsZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDMpO1xyXG4gICAgICAgIGV4cGVjdChtb2NrU3RyZWFtUmVhZGVyLnBhdXNlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICAgIGV4cGVjdChtb2NrU3RyZWFtUmVhZGVyLnJlc3VtZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaXRlcmF0ZSBzZXF1ZW50aWFsbHkgd2l0aCBwYXVzaW5nL3Jlc3VtaW5nIHRoZSBzdHJlYW0nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgc2VxdWVudGlhbFN0cmVhbUhhbmRsZXIuYXN5bmNJdGVyYXRlU2VxdWVudGlhbGx5KG1vY2tTdHJlYW1SZWFkZXIsIHRydWUpO1xyXG5cclxuICAgICAgICBleHBlY3QobW9ja0FzeW5jU3RyZWFtSGFuZGxlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoMSk7XHJcbiAgICAgICAgZXhwZWN0KG1vY2tTdHJlYW1SZWFkZXIucGF1c2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygzKTtcclxuICAgICAgICBleHBlY3QobW9ja1N0cmVhbVJlYWRlci5yZXN1bWUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygzKTtcclxuICAgIH0pO1xyXG59KTsiXX0=