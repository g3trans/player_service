"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require('aws-sdk');
const s3 = new AWS.S3();
const { BackfillPlayerCsvStreamToDDB } = require("./backfill-player-csv");
const handler = async (event, context) => {
    if (!process.env.ORIGIN_BUCKET_NAME) {
        throw new Error("Origin bucket name is not provided");
    }
    if (!process.env.DESTINATION_TABLE_NAME) {
        throw new Error("Destination table name is not provided");
    }
    const bucketName = process.env.ORIGIN_BUCKET_NAME;
    const objectKey = event.Records[0].s3.object.key;
    const s3Stream = await s3.getObject({ Bucket: bucketName, Key: objectKey }).createReadStream();
    const backfillPlayerCsv = new BackfillPlayerCsvStreamToDDB(s3Stream, false, process.env.DESTINATION_TABLE_NAME);
    await backfillPlayerCsv.process();
    return {
        statusCode: 200,
        headers: { "Content-Type": "text/plain" },
        body: ``,
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2ZpbGwtcGxheWVycy1sYW1iZGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJiYWNrZmlsbC1wbGF5ZXJzLWxhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFeEIsTUFBTSxFQUFFLDRCQUE0QixFQUFFLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFHbkUsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQWMsRUFBRSxPQUFnQixFQUFFLEVBQUU7SUFDOUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7UUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUU7UUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQzdEO0lBQ0QsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztJQUNsRCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2pELE1BQU0sUUFBUSxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUcvRixNQUFNLGlCQUFpQixHQUFHLElBQUksNEJBQTRCLENBQ3RELFFBQVEsRUFDUixLQUFLLEVBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FDckMsQ0FBQztJQUVGLE1BQU0saUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFbEMsT0FBTztRQUNILFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRTtRQUN6QyxJQUFJLEVBQUUsRUFBRTtLQUNYLENBQUM7QUFDTixDQUFDLENBQUM7QUF6QlcsUUFBQSxPQUFPLFdBeUJsQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcclxuY29uc3QgczMgPSBuZXcgQVdTLlMzKCk7XHJcblxyXG5jb25zdCB7IEJhY2tmaWxsUGxheWVyQ3N2U3RyZWFtVG9EREIgfSA9IHJlcXVpcmUoXCIuL2JhY2tmaWxsLXBsYXllci1jc3ZcIik7XHJcbmltcG9ydCB7IFMzRXZlbnQsIENvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJztcclxuXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBTM0V2ZW50LCBjb250ZXh0OiBDb250ZXh0KSA9PiB7XHJcbiAgICBpZiAoIXByb2Nlc3MuZW52Lk9SSUdJTl9CVUNLRVRfTkFNRSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9yaWdpbiBidWNrZXQgbmFtZSBpcyBub3QgcHJvdmlkZWRcIik7XHJcbiAgICB9XHJcbiAgICBpZiAoIXByb2Nlc3MuZW52LkRFU1RJTkFUSU9OX1RBQkxFX05BTUUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZXN0aW5hdGlvbiB0YWJsZSBuYW1lIGlzIG5vdCBwcm92aWRlZFwiKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSBwcm9jZXNzLmVudi5PUklHSU5fQlVDS0VUX05BTUU7XHJcbiAgICBjb25zdCBvYmplY3RLZXkgPSBldmVudC5SZWNvcmRzWzBdLnMzLm9iamVjdC5rZXk7XHJcbiAgICBjb25zdCBzM1N0cmVhbSA9IGF3YWl0IHMzLmdldE9iamVjdCh7IEJ1Y2tldDogYnVja2V0TmFtZSwgS2V5OiBvYmplY3RLZXkgfSkuY3JlYXRlUmVhZFN0cmVhbSgpO1xyXG5cclxuXHJcbiAgICBjb25zdCBiYWNrZmlsbFBsYXllckNzdiA9IG5ldyBCYWNrZmlsbFBsYXllckNzdlN0cmVhbVRvRERCKFxyXG4gICAgICAgIHMzU3RyZWFtLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIHByb2Nlc3MuZW52LkRFU1RJTkFUSU9OX1RBQkxFX05BTUVcclxuICAgICk7XHJcblxyXG4gICAgYXdhaXQgYmFja2ZpbGxQbGF5ZXJDc3YucHJvY2VzcygpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxyXG4gICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJ0ZXh0L3BsYWluXCIgfSxcclxuICAgICAgICBib2R5OiBgYCxcclxuICAgIH07XHJcbn07XHJcbiJdfQ==