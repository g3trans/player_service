"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerServiceStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const player_service_api_stack_1 = require("./player-service-api-stack");
const player_database_stack_1 = require("./player-database-stack");
const player_database_backfill_stack_1 = require("./player-database-backfill-stack");
class PlayerServiceStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stackName = 'PlayerService';
        const vpc = new aws_ec2_1.Vpc(this, stackName + 'Vpc', {
            ipAddresses: aws_ec2_1.IpAddresses.cidr('10.0.0.0/20'),
            maxAzs: 1,
        });
        this.playerDatabaseStack = new player_database_stack_1.PlayerDatabaseStack(this, stackName + 'Database', {
            environment: props.environment,
            vpc: vpc,
        });
        this.playerDatabaseBackfillStack = new player_database_backfill_stack_1.PlayerDatabaseBackfillStack(this, stackName + 'BackfillDatabase', {
            environment: props.environment,
            vpc: vpc,
            destinationTable: this.playerDatabaseStack.table
        });
        this.playerDatabaseBackfillStack.addDependency(this.playerDatabaseStack);
        new player_service_api_stack_1.PlayerServiceAPIStack(this, stackName + 'API', {
            environment: props.environment,
            databaseTable: this.playerDatabaseStack.table,
            vpc: vpc
        });
        this.playerDatabaseBackfillStack.addDependency(this.playerDatabaseStack);
    }
    getLogicalId(element) {
        if (element.node.id.includes('NestedStackResource')) {
            return /([a-zA-Z0-9]+)\.NestedStackResource/.exec(element.node.id)[1];
        }
        return super.getLogicalId(element);
    }
}
exports.PlayerServiceStack = PlayerServiceStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLXNlcnZpY2Utc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwbGF5ZXItc2VydmljZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBOEM7QUFHOUMsaURBQXFEO0FBQ3JELHlFQUFpRTtBQUVqRSxtRUFBNEQ7QUFDNUQscUZBQTZFO0FBTzdFLE1BQWEsa0JBQW1CLFNBQVEsbUJBQUs7SUFLM0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE4QjtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUM7UUFFbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsR0FBRyxLQUFLLEVBQUU7WUFDM0MsV0FBVyxFQUFFLHFCQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUM1QyxNQUFNLEVBQUUsQ0FBQztTQUNWLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLDJDQUFtQixDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsVUFBVSxFQUFFO1lBQy9FLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixHQUFHLEVBQUUsR0FBRztTQUNULENBQUMsQ0FBQztRQUVILElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLDREQUEyQixDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsa0JBQWtCLEVBQUU7WUFDdkcsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLEdBQUcsRUFBRSxHQUFHO1lBQ1IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUs7U0FDakQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUV6RSxJQUFJLGdEQUFxQixDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsS0FBSyxFQUFFO1lBQ2pELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixhQUFhLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUs7WUFDN0MsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsMkJBQTJCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBbUI7UUFDOUIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUNuRCxPQUFPLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO1FBQ0QsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BDLENBQUM7Q0FDRjtBQXpDRCxnREF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NmbkVsZW1lbnQsIFN0YWNrfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQge0NvbnN0cnVjdH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7U3RhY2tQcm9wc30gZnJvbSBcImF3cy1jZGstbGliL2NvcmUvbGliL3N0YWNrXCI7XG5pbXBvcnQge0lwQWRkcmVzc2VzLCBWcGN9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XG5pbXBvcnQge1BsYXllclNlcnZpY2VBUElTdGFja30gZnJvbSBcIi4vcGxheWVyLXNlcnZpY2UtYXBpLXN0YWNrXCI7XG5pbXBvcnQge0Vudmlyb25tZW50UHJvcHN9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQge1BsYXllckRhdGFiYXNlU3RhY2t9IGZyb20gXCIuL3BsYXllci1kYXRhYmFzZS1zdGFja1wiO1xuaW1wb3J0IHtQbGF5ZXJEYXRhYmFzZUJhY2tmaWxsU3RhY2t9IGZyb20gXCIuL3BsYXllci1kYXRhYmFzZS1iYWNrZmlsbC1zdGFja1wiO1xuXG5cbmludGVyZmFjZSBQbGF5ZXJTZXJ2aWNlU3RhY2tQcm9wcyBleHRlbmRzIFN0YWNrUHJvcHMsIEVudmlyb25tZW50UHJvcHMge1xuXG59XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXJTZXJ2aWNlU3RhY2sgZXh0ZW5kcyBTdGFjayB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBwbGF5ZXJEYXRhYmFzZVN0YWNrOiBQbGF5ZXJEYXRhYmFzZVN0YWNrXG4gIHByaXZhdGUgcmVhZG9ubHkgcGxheWVyRGF0YWJhc2VCYWNrZmlsbFN0YWNrOiBQbGF5ZXJEYXRhYmFzZUJhY2tmaWxsU3RhY2tcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogUGxheWVyU2VydmljZVN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHN0YWNrTmFtZSA9ICdQbGF5ZXJTZXJ2aWNlJztcblxuICAgIGNvbnN0IHZwYyA9IG5ldyBWcGModGhpcywgc3RhY2tOYW1lICsgJ1ZwYycsIHtcbiAgICAgIGlwQWRkcmVzc2VzOiBJcEFkZHJlc3Nlcy5jaWRyKCcxMC4wLjAuMC8yMCcpLFxuICAgICAgbWF4QXpzOiAxLFxuICAgIH0pO1xuXG4gICAgdGhpcy5wbGF5ZXJEYXRhYmFzZVN0YWNrID0gbmV3IFBsYXllckRhdGFiYXNlU3RhY2sodGhpcywgc3RhY2tOYW1lICsgJ0RhdGFiYXNlJywge1xuICAgICAgZW52aXJvbm1lbnQ6IHByb3BzLmVudmlyb25tZW50LFxuICAgICAgdnBjOiB2cGMsXG4gICAgfSk7XG5cbiAgICB0aGlzLnBsYXllckRhdGFiYXNlQmFja2ZpbGxTdGFjayA9IG5ldyBQbGF5ZXJEYXRhYmFzZUJhY2tmaWxsU3RhY2sodGhpcywgc3RhY2tOYW1lICsgJ0JhY2tmaWxsRGF0YWJhc2UnLCB7XG4gICAgICBlbnZpcm9ubWVudDogcHJvcHMuZW52aXJvbm1lbnQsXG4gICAgICB2cGM6IHZwYyxcbiAgICAgIGRlc3RpbmF0aW9uVGFibGU6IHRoaXMucGxheWVyRGF0YWJhc2VTdGFjay50YWJsZVxuICAgIH0pO1xuICAgIHRoaXMucGxheWVyRGF0YWJhc2VCYWNrZmlsbFN0YWNrLmFkZERlcGVuZGVuY3kodGhpcy5wbGF5ZXJEYXRhYmFzZVN0YWNrKTtcblxuICAgIG5ldyBQbGF5ZXJTZXJ2aWNlQVBJU3RhY2sodGhpcywgc3RhY2tOYW1lICsgJ0FQSScsIHtcbiAgICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICAgIGRhdGFiYXNlVGFibGU6IHRoaXMucGxheWVyRGF0YWJhc2VTdGFjay50YWJsZSxcbiAgICAgIHZwYzogdnBjXG4gICAgfSk7XG4gICAgdGhpcy5wbGF5ZXJEYXRhYmFzZUJhY2tmaWxsU3RhY2suYWRkRGVwZW5kZW5jeSh0aGlzLnBsYXllckRhdGFiYXNlU3RhY2spO1xuICB9XG5cbiAgZ2V0TG9naWNhbElkKGVsZW1lbnQ6IENmbkVsZW1lbnQpOiBzdHJpbmcge1xuICAgIGlmIChlbGVtZW50Lm5vZGUuaWQuaW5jbHVkZXMoJ05lc3RlZFN0YWNrUmVzb3VyY2UnKSkge1xuICAgICAgcmV0dXJuIC8oW2EtekEtWjAtOV0rKVxcLk5lc3RlZFN0YWNrUmVzb3VyY2UvLmV4ZWMoZWxlbWVudC5ub2RlLmlkKSFbMV1cbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmdldExvZ2ljYWxJZChlbGVtZW50KVxuICB9XG59Il19