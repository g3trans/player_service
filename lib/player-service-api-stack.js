"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerServiceAPIStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
class PlayerServiceAPIStack extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stackName = 'PlayerServiceAPI';
        const playerServiceLambda = new aws_lambda_1.Function(this, stackName + 'Handler', {
            runtime: aws_lambda_1.Runtime.NODEJS_16_X,
            handler: 'playerservice.handler',
            //code: Code.fromAsset(path.join(__dirname, '../lambda')),
            code: aws_lambda_1.Code.fromAsset('lambda'),
            environment: {
                DATABASE_TABLE_NAME: props.databaseTable.tableName
            },
            vpc: props.vpc,
            allowAllOutbound: true,
        });
        // Grant the lambda function the permissions to read/write from the DynamoDB table
        props.databaseTable.grantReadWriteData(playerServiceLambda);
        const api = new aws_apigateway_1.RestApi(this, stackName + 'ApiGateway', {
            deployOptions: {
                stageName: props.environment,
                description: 'Player Service API',
            },
            defaultCorsPreflightOptions: {
                allowOrigins: aws_apigateway_1.Cors.ALL_ORIGINS,
                allowMethods: aws_apigateway_1.Cors.ALL_METHODS,
            },
        });
        const apiRoot = api.root.addResource('api');
        const players = apiRoot.addResource('players');
        const playerById = players.addResource('{playerID}');
        const getPlayersIntegration = new aws_apigateway_1.LambdaIntegration(playerServiceLambda);
        const getPlayerByIdIntegration = new aws_apigateway_1.LambdaIntegration(playerServiceLambda);
        players.addMethod('GET', getPlayersIntegration);
        playerById.addMethod('GET', getPlayerByIdIntegration);
    }
}
exports.PlayerServiceAPIStack = PlayerServiceAPIStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLXNlcnZpY2UtYXBpLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGxheWVyLXNlcnZpY2UtYXBpLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUEwRDtBQUUxRCx1REFBK0Q7QUFDL0QsK0RBQXNGO0FBU3RGLE1BQWEscUJBQXNCLFNBQVEseUJBQVc7SUFDbEQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQztRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztRQUVyQyxNQUFNLG1CQUFtQixHQUFHLElBQUkscUJBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxHQUFHLFNBQVMsRUFBRTtZQUNsRSxPQUFPLEVBQUUsb0JBQU8sQ0FBQyxXQUFXO1lBQzVCLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsMERBQTBEO1lBQzFELElBQUksRUFBRSxpQkFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDOUIsV0FBVyxFQUFFO2dCQUNULG1CQUFtQixFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUzthQUNyRDtZQUNELEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLGdCQUFnQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsa0ZBQWtGO1FBQ2xGLEtBQUssQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUU1RCxNQUFNLEdBQUcsR0FBRyxJQUFJLHdCQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsR0FBRyxZQUFZLEVBQUU7WUFDcEQsYUFBYSxFQUFFO2dCQUNYLFNBQVMsRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDNUIsV0FBVyxFQUFFLG9CQUFvQjthQUNwQztZQUNELDJCQUEyQixFQUFFO2dCQUN6QixZQUFZLEVBQUUscUJBQUksQ0FBQyxXQUFXO2dCQUM5QixZQUFZLEVBQUUscUJBQUksQ0FBQyxXQUFXO2FBQ2pDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQWEsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXJELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxrQ0FBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxrQ0FBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTVFLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDaEQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7QUF6Q0Qsc0RBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWcGN9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XHJcbmltcG9ydCB7TmVzdGVkU3RhY2ssIE5lc3RlZFN0YWNrUHJvcHN9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xyXG5pbXBvcnQge0NvbnN0cnVjdH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcclxuaW1wb3J0IHtDb2RlLCBGdW5jdGlvbiwgUnVudGltZX0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcclxuaW1wb3J0IHtDb3JzLCBMYW1iZGFJbnRlZ3JhdGlvbiwgUmVzdEFwaSwgUmVzb3VyY2V9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheVwiO1xyXG5pbXBvcnQge0Vudmlyb25tZW50UHJvcHN9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7VGFibGV9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGJcIjtcclxuXHJcbmludGVyZmFjZSBQbGF5ZXJTZXJ2aWNlQVBJU3RhY2tQcm9wcyBleHRlbmRzIE5lc3RlZFN0YWNrUHJvcHMsIEVudmlyb25tZW50UHJvcHMge1xyXG4gICAgdnBjOiBWcGM7XHJcbiAgICBkYXRhYmFzZVRhYmxlOiBUYWJsZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBsYXllclNlcnZpY2VBUElTdGFjayBleHRlbmRzIE5lc3RlZFN0YWNrIHtcclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQbGF5ZXJTZXJ2aWNlQVBJU3RhY2tQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgICAgICBjb25zdCBzdGFja05hbWUgPSAnUGxheWVyU2VydmljZUFQSSc7XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYXllclNlcnZpY2VMYW1iZGEgPSBuZXcgRnVuY3Rpb24odGhpcywgc3RhY2tOYW1lICsgJ0hhbmRsZXInLCB7XHJcbiAgICAgICAgICAgIHJ1bnRpbWU6IFJ1bnRpbWUuTk9ERUpTXzE2X1gsXHJcbiAgICAgICAgICAgIGhhbmRsZXI6ICdwbGF5ZXJzZXJ2aWNlLmhhbmRsZXInLFxyXG4gICAgICAgICAgICAvL2NvZGU6IENvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9sYW1iZGEnKSksXHJcbiAgICAgICAgICAgIGNvZGU6IENvZGUuZnJvbUFzc2V0KCdsYW1iZGEnKSxcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcclxuICAgICAgICAgICAgICAgIERBVEFCQVNFX1RBQkxFX05BTUU6IHByb3BzLmRhdGFiYXNlVGFibGUudGFibGVOYW1lXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZwYzogcHJvcHMudnBjLFxyXG4gICAgICAgICAgICBhbGxvd0FsbE91dGJvdW5kOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIEdyYW50IHRoZSBsYW1iZGEgZnVuY3Rpb24gdGhlIHBlcm1pc3Npb25zIHRvIHJlYWQvd3JpdGUgZnJvbSB0aGUgRHluYW1vREIgdGFibGVcclxuICAgICAgICBwcm9wcy5kYXRhYmFzZVRhYmxlLmdyYW50UmVhZFdyaXRlRGF0YShwbGF5ZXJTZXJ2aWNlTGFtYmRhKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXBpID0gbmV3IFJlc3RBcGkodGhpcywgc3RhY2tOYW1lICsgJ0FwaUdhdGV3YXknLCB7XHJcbiAgICAgICAgICAgIGRlcGxveU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHN0YWdlTmFtZTogcHJvcHMuZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BsYXllciBTZXJ2aWNlIEFQSScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmF1bHRDb3JzUHJlZmxpZ2h0T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgYWxsb3dPcmlnaW5zOiBDb3JzLkFMTF9PUklHSU5TLFxyXG4gICAgICAgICAgICAgICAgYWxsb3dNZXRob2RzOiBDb3JzLkFMTF9NRVRIT0RTLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBhcGlSb290OiBSZXNvdXJjZSA9IGFwaS5yb290LmFkZFJlc291cmNlKCdhcGknKTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJzID0gYXBpUm9vdC5hZGRSZXNvdXJjZSgncGxheWVycycpO1xyXG4gICAgICAgIGNvbnN0IHBsYXllckJ5SWQgPSBwbGF5ZXJzLmFkZFJlc291cmNlKCd7cGxheWVySUR9Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGdldFBsYXllcnNJbnRlZ3JhdGlvbiA9IG5ldyBMYW1iZGFJbnRlZ3JhdGlvbihwbGF5ZXJTZXJ2aWNlTGFtYmRhKTtcclxuICAgICAgICBjb25zdCBnZXRQbGF5ZXJCeUlkSW50ZWdyYXRpb24gPSBuZXcgTGFtYmRhSW50ZWdyYXRpb24ocGxheWVyU2VydmljZUxhbWJkYSk7XHJcblxyXG4gICAgICAgIHBsYXllcnMuYWRkTWV0aG9kKCdHRVQnLCBnZXRQbGF5ZXJzSW50ZWdyYXRpb24pO1xyXG4gICAgICAgIHBsYXllckJ5SWQuYWRkTWV0aG9kKCdHRVQnLCBnZXRQbGF5ZXJCeUlkSW50ZWdyYXRpb24pO1xyXG4gICAgfVxyXG59Il19