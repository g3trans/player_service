"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerServiceAPIStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
class PlayerServiceAPIStack extends aws_cdk_lib_1.NestedStack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stackName = 'PlayerServiceAPI';
        const playerServiceLambda = new aws_lambda_1.Function(this, stackName + 'Handler', {
            runtime: aws_lambda_1.Runtime.NODEJS_16_X,
            handler: 'playerservice.handler',
            code: aws_lambda_1.Code.fromAsset('lambda'),
            environment: {
                DATABASE_TABLE_NAME: props.databaseTable.tableName
            },
            vpc: props.vpc,
            allowAllOutbound: true,
        });
        // Grant the lambda function the permissions to read/write from the DynamoDB table
        props.databaseTable.grantReadWriteData(playerServiceLambda);
        const api = new aws_apigateway_1.RestApi(this, stackName + 'ApiGateway', {
            deployOptions: {
                stageName: props.environment,
                description: 'Player Service API',
            },
            defaultCorsPreflightOptions: {
                allowOrigins: aws_apigateway_1.Cors.ALL_ORIGINS,
                allowMethods: aws_apigateway_1.Cors.ALL_METHODS,
            },
        });
        const apiRoot = api.root.addResource('api');
        const players = apiRoot.addResource('players');
        const playerById = players.addResource('{playerID}');
        const playersBetweenLastNames = apiRoot.addResource('playersbetweenlastnames');
        const getPlayersIntegration = new aws_apigateway_1.LambdaIntegration(playerServiceLambda);
        const getPlayerByIdIntegration = new aws_apigateway_1.LambdaIntegration(playerServiceLambda);
        const playersBetweenLastNamesIntegration = new aws_apigateway_1.LambdaIntegration(playerServiceLambda);
        players.addMethod('GET', getPlayersIntegration);
        playerById.addMethod('GET', getPlayerByIdIntegration);
        playersBetweenLastNames.addMethod('GET', playersBetweenLastNamesIntegration);
    }
}
exports.PlayerServiceAPIStack = PlayerServiceAPIStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLXNlcnZpY2UtYXBpLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGxheWVyLXNlcnZpY2UtYXBpLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUEwRDtBQUUxRCx1REFBK0Q7QUFDL0QsK0RBQXNGO0FBU3RGLE1BQWEscUJBQXNCLFNBQVEseUJBQVc7SUFDbEQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQztRQUN2RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztRQUVyQyxNQUFNLG1CQUFtQixHQUFHLElBQUkscUJBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxHQUFHLFNBQVMsRUFBRTtZQUNsRSxPQUFPLEVBQUUsb0JBQU8sQ0FBQyxXQUFXO1lBQzVCLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsSUFBSSxFQUFFLGlCQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUM5QixXQUFXLEVBQUU7Z0JBQ1QsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTO2FBQ3JEO1lBQ0QsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsZ0JBQWdCLEVBQUUsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFDSCxrRkFBa0Y7UUFDbEYsS0FBSyxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTVELE1BQU0sR0FBRyxHQUFHLElBQUksd0JBQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxHQUFHLFlBQVksRUFBRTtZQUNwRCxhQUFhLEVBQUU7Z0JBQ1gsU0FBUyxFQUFFLEtBQUssQ0FBQyxXQUFXO2dCQUM1QixXQUFXLEVBQUUsb0JBQW9CO2FBQ3BDO1lBQ0QsMkJBQTJCLEVBQUU7Z0JBQ3pCLFlBQVksRUFBRSxxQkFBSSxDQUFDLFdBQVc7Z0JBQzlCLFlBQVksRUFBRSxxQkFBSSxDQUFDLFdBQVc7YUFDakM7U0FDSixDQUFDLENBQUM7UUFFSCxNQUFNLE9BQU8sR0FBYSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDckQsTUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFL0UsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGtDQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDekUsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLGtDQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDNUUsTUFBTSxrQ0FBa0MsR0FBRyxJQUFJLGtDQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFdEYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUNoRCxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RELHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsa0NBQWtDLENBQUMsQ0FBQztJQUNqRixDQUFDO0NBQ0o7QUEzQ0Qsc0RBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWcGN9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XHJcbmltcG9ydCB7TmVzdGVkU3RhY2ssIE5lc3RlZFN0YWNrUHJvcHN9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xyXG5pbXBvcnQge0NvbnN0cnVjdH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcclxuaW1wb3J0IHtDb2RlLCBGdW5jdGlvbiwgUnVudGltZX0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcclxuaW1wb3J0IHtDb3JzLCBMYW1iZGFJbnRlZ3JhdGlvbiwgUmVzdEFwaSwgUmVzb3VyY2V9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheVwiO1xyXG5pbXBvcnQge0Vudmlyb25tZW50UHJvcHN9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7VGFibGV9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGJcIjtcclxuXHJcbmludGVyZmFjZSBQbGF5ZXJTZXJ2aWNlQVBJU3RhY2tQcm9wcyBleHRlbmRzIE5lc3RlZFN0YWNrUHJvcHMsIEVudmlyb25tZW50UHJvcHMge1xyXG4gICAgdnBjOiBWcGM7XHJcbiAgICBkYXRhYmFzZVRhYmxlOiBUYWJsZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBsYXllclNlcnZpY2VBUElTdGFjayBleHRlbmRzIE5lc3RlZFN0YWNrIHtcclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQbGF5ZXJTZXJ2aWNlQVBJU3RhY2tQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgICAgICBjb25zdCBzdGFja05hbWUgPSAnUGxheWVyU2VydmljZUFQSSc7XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYXllclNlcnZpY2VMYW1iZGEgPSBuZXcgRnVuY3Rpb24odGhpcywgc3RhY2tOYW1lICsgJ0hhbmRsZXInLCB7XHJcbiAgICAgICAgICAgIHJ1bnRpbWU6IFJ1bnRpbWUuTk9ERUpTXzE2X1gsXHJcbiAgICAgICAgICAgIGhhbmRsZXI6ICdwbGF5ZXJzZXJ2aWNlLmhhbmRsZXInLFxyXG4gICAgICAgICAgICBjb2RlOiBDb2RlLmZyb21Bc3NldCgnbGFtYmRhJyksXHJcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XHJcbiAgICAgICAgICAgICAgICBEQVRBQkFTRV9UQUJMRV9OQU1FOiBwcm9wcy5kYXRhYmFzZVRhYmxlLnRhYmxlTmFtZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB2cGM6IHByb3BzLnZwYyxcclxuICAgICAgICAgICAgYWxsb3dBbGxPdXRib3VuZDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBHcmFudCB0aGUgbGFtYmRhIGZ1bmN0aW9uIHRoZSBwZXJtaXNzaW9ucyB0byByZWFkL3dyaXRlIGZyb20gdGhlIER5bmFtb0RCIHRhYmxlXHJcbiAgICAgICAgcHJvcHMuZGF0YWJhc2VUYWJsZS5ncmFudFJlYWRXcml0ZURhdGEocGxheWVyU2VydmljZUxhbWJkYSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFwaSA9IG5ldyBSZXN0QXBpKHRoaXMsIHN0YWNrTmFtZSArICdBcGlHYXRld2F5Jywge1xyXG4gICAgICAgICAgICBkZXBsb3lPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBzdGFnZU5hbWU6IHByb3BzLmVudmlyb25tZW50LFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQbGF5ZXIgU2VydmljZSBBUEknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZhdWx0Q29yc1ByZWZsaWdodE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGFsbG93T3JpZ2luczogQ29ycy5BTExfT1JJR0lOUyxcclxuICAgICAgICAgICAgICAgIGFsbG93TWV0aG9kczogQ29ycy5BTExfTUVUSE9EUyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYXBpUm9vdDogUmVzb3VyY2UgPSBhcGkucm9vdC5hZGRSZXNvdXJjZSgnYXBpJyk7XHJcbiAgICAgICAgY29uc3QgcGxheWVycyA9IGFwaVJvb3QuYWRkUmVzb3VyY2UoJ3BsYXllcnMnKTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJCeUlkID0gcGxheWVycy5hZGRSZXNvdXJjZSgne3BsYXllcklEfScpO1xyXG4gICAgICAgIGNvbnN0IHBsYXllcnNCZXR3ZWVuTGFzdE5hbWVzID0gYXBpUm9vdC5hZGRSZXNvdXJjZSgncGxheWVyc2JldHdlZW5sYXN0bmFtZXMnKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ2V0UGxheWVyc0ludGVncmF0aW9uID0gbmV3IExhbWJkYUludGVncmF0aW9uKHBsYXllclNlcnZpY2VMYW1iZGEpO1xyXG4gICAgICAgIGNvbnN0IGdldFBsYXllckJ5SWRJbnRlZ3JhdGlvbiA9IG5ldyBMYW1iZGFJbnRlZ3JhdGlvbihwbGF5ZXJTZXJ2aWNlTGFtYmRhKTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJzQmV0d2Vlbkxhc3ROYW1lc0ludGVncmF0aW9uID0gbmV3IExhbWJkYUludGVncmF0aW9uKHBsYXllclNlcnZpY2VMYW1iZGEpO1xyXG5cclxuICAgICAgICBwbGF5ZXJzLmFkZE1ldGhvZCgnR0VUJywgZ2V0UGxheWVyc0ludGVncmF0aW9uKTtcclxuICAgICAgICBwbGF5ZXJCeUlkLmFkZE1ldGhvZCgnR0VUJywgZ2V0UGxheWVyQnlJZEludGVncmF0aW9uKTtcclxuICAgICAgICBwbGF5ZXJzQmV0d2Vlbkxhc3ROYW1lcy5hZGRNZXRob2QoJ0dFVCcsIHBsYXllcnNCZXR3ZWVuTGFzdE5hbWVzSW50ZWdyYXRpb24pO1xyXG4gICAgfVxyXG59Il19